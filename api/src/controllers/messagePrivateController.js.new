const MessagePrivate = require('../models/messagePrivate');
const User = require('../models/user');
const AppError = require('../utils/appError');
// Éviter la dépendance circulaire en utilisant une référence dynamique à io
let io;
setTimeout(() => {
  io = require('../server').io;
}, 0);

/**
 * Contrôleur pour la gestion des messages privés
 */
const messagePrivateController = {
  /**
   * Récupérer les messages privés entre l'utilisateur connecté et un autre utilisateur
   */
  getPrivateMessages: async (req, res, next) => {
    try {
      const { userId } = req.params;
      
      // Vérifier si l'utilisateur existe
      const userExists = await User.exists({ _id: userId });
      if (!userExists) {
        return next(new AppError('Utilisateur non trouvé', 404));
      }
      
      // Vérifier si une conversation existe déjà entre les deux utilisateurs
      const ConversationPrivee = require('../models/conversationPrivee');
      let conversation = await ConversationPrivee.findOne({
        'participants.utilisateur': { $all: [req.user._id, userId] },
        estGroupe: false
      });
      
      // Si aucune conversation n'existe, en créer une nouvelle
      if (!conversation) {
        console.log('Aucune conversation existante, création d\'une nouvelle...');
        conversation = await ConversationPrivee.create({
          participants: [
            { utilisateur: req.user._id },
            { utilisateur: userId }
          ],
          createur: req.user._id,
          estGroupe: false
        });
        console.log(`Nouvelle conversation créée: ${conversation._id}`);
      }
      
      // Récupérer les messages de la conversation
      const messages = await MessagePrivate.find({
        conversation: conversation._id
      })
      .sort({ horodatage: 1 }) // Tri par date croissante
      .populate('expediteur', 'username firstName lastName profilePicture')
      .populate({
        path: 'reponseA',
        populate: {
          path: 'expediteur',
          select: 'username firstName lastName profilePicture'
        }
      });
      
      // Marquer les messages non lus comme lus si l'utilisateur est le destinataire
      const unreadMessages = messages.filter(msg => {
        // Vérifier si l'expéditeur n'est pas l'utilisateur courant
        if (msg.expediteur._id.toString() === req.user._id.toString()) {
          return false;
        }
        
        // Vérifier si l'utilisateur n'a pas déjà lu le message
        if (Array.isArray(msg.lu)) {
          return !msg.lu.some(l => 
            l && l.utilisateur && l.utilisateur.toString && l.utilisateur.toString() === req.user._id.toString()
          );
        }
        
        return true;
      });
      
      // Si des messages non lus sont trouvés, les marquer comme lus
      if (unreadMessages.length > 0) {
        for (const message of unreadMessages) {
          if (!Array.isArray(message.lu)) {
            message.lu = [];
          }
          
          message.lu.push({
            utilisateur: req.user._id,
            dateLecture: new Date()
          });
          
          await message.save();
          
          // Notifier l'expéditeur que ses messages ont été lus
          if (io) {
            io.to(message.expediteur._id.toString()).emit('message-prive-lu', {
              messageId: message._id,
              lecteur: req.user._id,
              conversation: conversation._id
            });
          }
        }
      }
      
      res.json({
        success: true,
        count: messages.length,
        data: messages,
        conversation: {
          _id: conversation._id,
          dateCreation: conversation.dateCreation,
          participants: conversation.participants
        }
      });
    } catch (error) {
      console.error('Erreur lors de la récupération des messages privés:', error);
      next(new AppError('Erreur lors de la récupération des messages privés', 500));
    }
  },
  
  /**
   * Récupérer toutes les conversations privées de l'utilisateur connecté
   */
  getAllPrivateConversations: async (req, res, next) => {
    try {
      // Utiliser directement le modèle ConversationPrivee
      const ConversationPrivee = require('../models/conversationPrivee');
      
      // Récupérer toutes les conversations où l'utilisateur est participant
      const conversationsData = await ConversationPrivee.find({
        'participants.utilisateur': req.user._id
      })
      .populate('participants.utilisateur', 'username firstName lastName profilePicture')
      .populate('createur', 'username firstName lastName profilePicture')
      .populate({
        path: 'dernierMessage',
        populate: {
          path: 'expediteur',
          select: 'username firstName lastName profilePicture'
        }
      })
      .sort({ updatedAt: -1 }); // Tri par date de mise à jour décroissante
      
      // Formater les conversations pour maintenir la compatibilité avec le format précédent
      const formattedConversations = [];
      
      for (const conversation of conversationsData) {
        // Pour les conversations 1:1, trouver l'autre utilisateur
        if (!conversation.estGroupe) {
          // Trouver l'autre participant (pas l'utilisateur connecté)
          const otherParticipant = conversation.participants.find(
            p => p.utilisateur._id.toString() !== req.user._id.toString()
          );
          
          // Si on trouve l'autre participant
          if (otherParticipant && otherParticipant.utilisateur) {
            const otherUser = otherParticipant.utilisateur;
            
            // Compter les messages non lus
            let unreadCount = 0;
            if (conversation.dernierMessage) {
              // Récupérer tous les messages non lus de cette conversation
              const MessagePrivate = require('../models/messagePrivate');
              unreadCount = await MessagePrivate.countDocuments({
                conversation: conversation._id,
                expediteur: { $ne: req.user._id },
                'lu': { 
                  $not: { 
                    $elemMatch: { 
                      utilisateur: req.user._id 
                    } 
                  } 
                }
              });
            }
            
            // Construire l'objet de conversation formaté
            formattedConversations.push({
              _id: conversation._id,
              user: {
                _id: otherUser._id,
                username: otherUser.username,
                prenom: otherUser.firstName,
                nom: otherUser.lastName,
                profilePicture: otherUser.profilePicture
              },
              lastMessage: conversation.dernierMessage ? {
                _id: conversation.dernierMessage._id,
                contenu: conversation.dernierMessage.contenu,
                horodatage: conversation.dernierMessage.horodatage,
                envoye: conversation.dernierMessage.envoye,
                isFromMe: conversation.dernierMessage.expediteur && 
                         conversation.dernierMessage.expediteur._id.toString() === req.user._id.toString()
              } : null,
              unreadCount: unreadCount,
              isGroup: false,
              dateCreation: conversation.dateCreation
            });
          }
        } else {
          // Pour les conversations de groupe
          formattedConversations.push({
            _id: conversation._id,
            user: {
              _id: `group-${conversation._id}`,
              username: conversation.nom || `Groupe (${conversation.participants.length} participants)`,
              prenom: '',
              nom: '',
              profilePicture: '/img/group-avatar.png'
            },
            lastMessage: conversation.dernierMessage ? {
              _id: conversation.dernierMessage._id,
              contenu: conversation.dernierMessage.contenu,
              horodatage: conversation.dernierMessage.horodatage,
              envoye: conversation.dernierMessage.envoye,
              isFromMe: conversation.dernierMessage.expediteur && 
                       conversation.dernierMessage.expediteur._id.toString() === req.user._id.toString()
            } : null,
            unreadCount: 0, // À implémenter si nécessaire
            isGroup: true,
            participants: conversation.participants.map(p => p.utilisateur),
            dateCreation: conversation.dateCreation
          });
        }
      }
      
      res.json({
        success: true,
        count: formattedConversations.length,
        data: formattedConversations
      });
    } catch (error) {
      console.error('Erreur lors de la récupération des conversations privées:', error);
      next(new AppError('Erreur lors de la récupération des conversations privées', 500));
    }
  },
  
  /**
   * Envoyer un message privé à un autre utilisateur
   */
  sendPrivateMessage: async (req, res, next) => {
    try {
      const { destinataireId, contenu, reponseAId } = req.body;
      
      if (!contenu || contenu.trim() === '') {
        return next(new AppError('Le contenu du message ne peut pas être vide', 400));
      }
      
      // Vérifier si le destinataire existe
      const destinataireExists = await User.exists({ _id: destinataireId });
      if (!destinataireExists) {
        return next(new AppError('Destinataire non trouvé', 404));
      }
      
      // Vérifier si c'est une réponse à un message existant
      let reponseA = null;
      if (reponseAId) {
        reponseA = await MessagePrivate.findById(reponseAId);
        if (!reponseA) {
          return next(new AppError('Message original non trouvé', 404));
        }
      }
      
      // Vérifier si une conversation existe déjà entre les deux utilisateurs
      const ConversationPrivee = require('../models/conversationPrivee');
      let conversation = await ConversationPrivee.findOne({
        'participants.utilisateur': { $all: [req.user._id, destinataireId] },
        estGroupe: false
      });
      
      // Si aucune conversation n'existe, en créer une nouvelle
      if (!conversation) {
        conversation = await ConversationPrivee.create({
          participants: [
            { utilisateur: req.user._id },
            { utilisateur: destinataireId }
          ],
          createur: req.user._id,
          estGroupe: false
        });
      }
      
      // Si le message est une réponse, vérifier qu'il appartient à la même conversation
      if (reponseA) {
        // Vérifier que le message auquel on répond appartient à la conversation
        if (reponseA.conversation && !reponseA.conversation.equals(conversation._id)) {
          return next(new AppError('Vous n\'êtes pas autorisé à répondre à ce message', 403));
        }
      }
      
      // Créer le nouveau message privé avec la structure standardisée
      const newMessage = await MessagePrivate.create({
        contenu,
        expediteur: req.user._id,
        // Utiliser le champ conversation
        conversation: conversation._id,
        reponseA: reponseA || null,
        envoye: true,
        lu: [{ utilisateur: req.user._id, dateLecture: new Date() }] // L'expéditeur a déjà lu son propre message
      });
      
      // Mettre à jour le dernier message de la conversation
      conversation.dernierMessage = newMessage._id;
      await conversation.save();
      
      // Peupler les références pour la réponse
      const populatedMessage = await MessagePrivate.findById(newMessage._id)
        .populate('expediteur', 'username firstName lastName profilePicture')
        .populate({
          path: 'reponseA',
          populate: {
            path: 'expediteur',
            select: 'username firstName lastName profilePicture'
          }
        });
      
      // Notifier le destinataire en temps réel via le service Socket
      // Note: La notification en temps réel est gérée par le service Socket
      // lors de l'événement 'envoyer-message-prive', pas besoin de le faire ici
      
      res.status(201).json({
        success: true,
        data: populatedMessage
      });
    } catch (error) {
      console.error('Erreur lors de l\'envoi du message privé:', error);
      next(new AppError('Erreur lors de l\'envoi du message privé', 500));
    }
  },
  
  /**
   * Marquer un message privé comme lu
   */
  markMessageAsRead: async (req, res, next) => {
    try {
      const { messageId } = req.params;
      
      // Vérifier si le message existe
      const message = await MessagePrivate.findById(messageId)
        .populate('conversation')
        .populate('expediteur', 'username firstName lastName profilePicture');
      
      if (!message) {
        return next(new AppError('Message non trouvé', 404));
      }
      
      // Vérifier que l'utilisateur est participant à la conversation
      if (!message.conversation) {
        return next(new AppError('La conversation associée à ce message n\'existe pas', 404));
      }
      
      const ConversationPrivee = require('../models/conversationPrivee');
      const conversation = await ConversationPrivee.findById(message.conversation._id);
      
      if (!conversation) {
        return next(new AppError('Conversation non trouvée', 404));
      }
      
      if (!conversation.estParticipant(req.user._id)) {
        return next(new AppError('Vous n\'êtes pas autorisé à accéder à cette conversation', 403));
      }
      
      // Vérifier que l'utilisateur n'est pas l'expéditeur du message
      if (message.expediteur._id.toString() === req.user._id.toString()) {
        return res.json({
          success: true,
          message: 'Le message est déjà marqué comme lu par l\'expéditeur',
          data: message
        });
      }
      
      // Vérifier si l'utilisateur a déjà lu le message
      let userHasRead = false;
      
      if (Array.isArray(message.lu)) {
        userHasRead = message.lu.some(read => {
          return read && read.utilisateur && read.utilisateur.toString && read.utilisateur.toString() === req.user._id.toString();
        });
      }
      
      // Si l'utilisateur n'a pas encore lu le message, l'ajouter à la liste
      if (!userHasRead) {
        // Si le champ lu n'est pas un tableau, l'initialiser
        if (!Array.isArray(message.lu)) {
          message.lu = [];
        }
        
        // Ajouter l'utilisateur au tableau des lecteurs
        message.lu.push({
          utilisateur: req.user._id,
          dateLecture: new Date()
        });
        
        await message.save();
        
        // Notifier l'expéditeur en temps réel
        if (io) {
          io.to(message.expediteur._id.toString()).emit('message-prive-lu', {
            messageId: message._id,
            lecteur: req.user._id,
            conversation: message.conversation._id
          });
        }
      }
      
      res.json({
        success: true,
        data: message
      });
    } catch (error) {
      console.error('Erreur lors du marquage du message comme lu:', error);
      next(new AppError('Erreur lors du marquage du message comme lu', 500));
    }
  },
  
  /**
   * Modifier un message privé
   */
  updatePrivateMessage: async (req, res, next) => {
    try {
      const { messageId } = req.params;
      const { contenu } = req.body;
      
      if (!contenu || contenu.trim() === '') {
        return next(new AppError('Le contenu du message ne peut pas être vide', 400));
      }
      
      // Vérifier si le message existe
      const message = await MessagePrivate.findById(messageId)
        .populate('conversation')
        .populate('expediteur', 'username firstName lastName profilePicture');
        
      if (!message) {
        return next(new AppError('Message non trouvé', 404));
      }
      
      // Vérifier que l'utilisateur est bien l'expéditeur du message
      if (message.expediteur._id.toString() !== req.user._id.toString()) {
        return next(new AppError('Vous n\'êtes pas autorisé à modifier ce message', 403));
      }
      
      // Vérifier que l'utilisateur est participant à la conversation
      if (!message.conversation) {
        return next(new AppError('La conversation associée à ce message n\'existe pas', 404));
      }
      
      const ConversationPrivee = require('../models/conversationPrivee');
      const conversation = await ConversationPrivee.findById(message.conversation._id);
      
      if (!conversation) {
        return next(new AppError('Conversation non trouvée', 404));
      }
      
      if (!conversation.estParticipant(req.user._id)) {
        return next(new AppError('Vous n\'êtes pas autorisé à modifier ce message', 403));
      }
      
      // Mettre à jour le message
      message.contenu = contenu;
      message.modifie = true;
      message.dateModification = Date.now();
      await message.save();
      
      // Peupler les références pour la réponse
      const populatedMessage = await MessagePrivate.findById(message._id)
        .populate('expediteur', 'username firstName lastName profilePicture')
        .populate('conversation')
        .populate({
          path: 'reponseA',
          populate: {
            path: 'expediteur',
            select: 'username firstName lastName profilePicture'
          }
        });
      
      // Notifier les autres participants de la conversation en temps réel
      if (io) {
        const participantsIds = conversation.participants
          .filter(p => p.utilisateur.toString() !== req.user._id.toString())
          .map(p => p.utilisateur.toString());
          
        participantsIds.forEach(participantId => {
          io.to(participantId).emit('message-prive-modifie', {
            messageId: message._id,
            contenu: message.contenu,
            conversation: message.conversation._id
          });
        });
      }
      
      res.json({
        success: true,
        data: populatedMessage,
        message: 'Message modifié avec succès'
      });
    } catch (error) {
      console.error('Erreur lors de la modification du message:', error);
      next(new AppError('Erreur lors de la modification du message', 500));
    }
  },
  
  /**
   * Récupérer les messages avec fichiers d'une conversation
   */
  getMessagesWithFiles: async (req, res, next) => {
    try {
      const { conversationId } = req.params;
      
      // Vérifier si la conversation existe
      console.log(`Récupération des messages avec fichiers pour la conversation: ${conversationId}`);
      console.log(`Utilisateur connecté: ${req.user._id}`);
      
      const ConversationPrivee = require('../models/conversationPrivee');
      const conversation = await ConversationPrivee.findById(conversationId);
      
      if (!conversation) {
        return next(new AppError('Conversation non trouvée', 404));
      }
      
      // Vérifier que l'utilisateur est participant à la conversation
      if (!conversation.estParticipant(req.user._id)) {
        return next(new AppError('Vous n\'êtes pas autorisé à accéder à cette conversation', 403));
      }
      
      // Utiliser une requête optimisée qui récupère tous les messages avec fichiers
      // pour cette conversation en utilisant le nouveau modèle standardisé
      console.log('Utilisation d\'une requête optimisée pour récupérer les messages avec fichiers');
      
      const messages = await MessagePrivate.find({
        // Récupérer tous les messages de la conversation qui contiennent des fichiers
        conversation: conversationId,
        'fichiers.0': { $exists: true }
      })
      .sort({ horodatage: 1 })
      .populate('expediteur', 'username firstName lastName profilePicture')
      .populate('conversation')
      .populate({
        path: 'reponseA',
        populate: {
          path: 'expediteur',
          select: 'username firstName lastName profilePicture'
        }
      });
      
      console.log(`${messages.length} messages avec fichiers trouvés pour la conversation ${conversationId}`);
      
      // Afficher des détails sur les messages trouvés pour le débogage
      if (messages.length > 0) {
        console.log('Détails des messages avec fichiers trouvés:');
        messages.forEach((msg) => {
          console.log(`- Message ID: ${msg._id}`);
          console.log(`  Expéditeur: ${msg.expediteur?._id || msg.expediteur}`);
          console.log(`  Fichiers: ${msg.fichiers ? msg.fichiers.length : 0}`);
          if (msg.fichiers && msg.fichiers.length > 0) {
            console.log(`  Premier fichier: ${JSON.stringify(msg.fichiers[0])}`);
          }
        });
      }
      
      res.json({
        success: true,
        count: messages.length,
        data: {
          messages
        }
      });
    } catch (error) {
      console.error('Erreur lors de la récupération des messages avec fichiers:', error);
      next(new AppError('Erreur lors de la récupération des messages avec fichiers', 500));
    }
  },
  
  /**
   * Supprimer un message privé
   */
  deletePrivateMessage: async (req, res, next) => {
    try {
      const { messageId } = req.params;
      
      // Vérifier si le message existe
      const message = await MessagePrivate.findById(messageId)
        .populate('conversation')
        .populate('expediteur', 'username firstName lastName profilePicture');
        
      if (!message) {
        return next(new AppError('Message non trouvé', 404));
      }
      
      // Vérifier que l'utilisateur est bien l'expéditeur du message
      if (message.expediteur._id.toString() !== req.user._id.toString()) {
        console.log(`Utilisateur non autorisé: ${req.user._id} pour le message: ${messageId}`);
        return next(new AppError('Vous n\'êtes pas autorisé à supprimer ce message', 403));
      }
      
      // Vérifier que l'utilisateur est participant à la conversation
      if (!message.conversation) {
        return next(new AppError('La conversation associée à ce message n\'existe pas', 404));
      }
      
      const ConversationPrivee = require('../models/conversationPrivee');
      const conversation = await ConversationPrivee.findById(message.conversation._id);
      
      if (!conversation) {
        return next(new AppError('Conversation non trouvée', 404));
      }
      
      if (!conversation.estParticipant(req.user._id)) {
        return next(new AppError('Vous n\'êtes pas autorisé à accéder à cette conversation', 403));
      }
      
      // Rechercher les messages qui font référence à ce message comme réponse
      console.log(`Recherche des messages qui font référence à: ${messageId}`);
      const referencingMessages = await MessagePrivate.find({ reponseA: messageId });
      
      // Mettre à jour les messages qui font référence à ce message
      if (referencingMessages.length > 0) {
        console.log(`${referencingMessages.length} messages font référence à ce message, mise à jour...`);
        await MessagePrivate.updateMany(
          { reponseA: messageId },
          { $unset: { reponseA: 1 } }
        );
      }
      
      // Vérifier si ce message est le dernier de la conversation
      let updateConversation = false;
      if (conversation.dernierMessage && conversation.dernierMessage.toString() === messageId) {
        updateConversation = true;
        // Trouver le message le plus récent de la conversation (hormis celui qu'on supprime)
        const previousMessage = await MessagePrivate.findOne({
          conversation: conversation._id,
          _id: { $ne: messageId }
        }).sort({ horodatage: -1 });
        
        if (previousMessage) {
          conversation.dernierMessage = previousMessage._id;
        } else {
          // S'il n'y a plus de messages, mettre dernierMessage à null
          conversation.dernierMessage = null;
        }
        
        await conversation.save();
        console.log(`Mise à jour du dernier message de la conversation: ${conversation._id}`);
      }
      
      // Supprimer le message
      console.log(`Suppression du message: ${messageId}`);
      await MessagePrivate.findByIdAndDelete(messageId);
      
      // Notifier tous les participants de la conversation en temps réel
      if (io) {
        try {
          const participantsIds = conversation.participants
            .filter(p => p.utilisateur.toString() !== req.user._id.toString())
            .map(p => p.utilisateur.toString());
            
          participantsIds.forEach(participantId => {
            io.to(participantId).emit('message-prive-supprime', {
              messageId: message._id,
              conversation: message.conversation._id,
              dernierMessageMisAJour: updateConversation
            });
          });
          
          console.log('Notifications envoyées avec succès');
        } catch (socketError) {
          console.error('Erreur lors de l\'envoi des notifications socket:', socketError);
          // Ne pas faire échouer la requête si la notification échoue
        }
      } else {
        console.log('Socket.IO n\'est pas disponible, notifications non envoyées');
      }
      
      res.json({
        success: true,
        message: 'Message supprimé avec succès'
      });
    } catch (error) {
      console.error('Erreur lors de la suppression du message:', error);
      next(new AppError('Erreur lors de la suppression du message', 500));
    }
  }
};

module.exports = messagePrivateController;
